--EASY--
--1. Who is the senior most employee based on job title?

select CONCAT(first_name , last_name) as Name from employee
WHERE reports_to is NULL

--2. Which countries have the most Invoices?

select COUNT(billing_country),billing_country AS count_country from invoice
GROUP BY billing_country
order by count_country desc

--3. What are top 3 values of total invoice?

select total from invoice
order by total desc
limit 3

/*4. Which city has the best customers? We would like to throw a promotional Music
Festival in the city we made the most money. Write a query that returns one city that
has the highest sum of invoice totals. Return both the city name & sum of all invoice
totals*/

select billing_city, sum(total) as Total from invoice
group by billing_city
order by Total desc
limit 1

/*5. Who is the best customer? The customer who has spent the most money will be
declared the best customer. Write a query that returns the person who has spent the
most money*/

select c.customer_id ,c.first_name, c.last_name,SUM(i.total) as TotalMoneySpent from invoice i
join customer c on
c.customer_id = i.customer_id
group by c.customer_id
order by TotalMoneySpent desc
limit 1


--Moderate
/*1. Write query to return the email, first name, last name, & Genre of all Rock Music
listeners. Return your list ordered alphabetically by email starting with A*/


select DISTINCT c.email , c.first_name , c.last_name , g.name FROM customer c
JOIN invoice i ON i.customer_id = c.customer_id
JOIN invoice_line il on il.invoice_id = i.invoice_id
join track t on t.track_id = il.track_id
JOIN genre g on g.genre_id = t.genre_id
where g.name = 'Rock' 
order by c.email

/*2. Let's invite the artists who have written the most rock music in our dataset. Write a
query that returns the Artist name and total track count of the top 10 rock bands*/

select * from artist

select a.name , count(al.artist_id) as number_of_tracks FROM artist a
JOIN album al on a.artist_id = al.artist_id
JOIN track t on t.album_id = al.album_id
join genre g on g.genre_id = t.genre_id
WHERE g.name = 'Rock'
group by a.name
ORDER BY number_of_tracks desc
limit 10

/*3. Return all the track names that have a song length longer than the average song length.
Return the Name and Milliseconds for each track. Order by the song length with the
longest songs listed first*/


select name , milliseconds from track
where milliseconds > (select avg(milliseconds) from track)
order by milliseconds desc

